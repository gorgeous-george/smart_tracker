version: "3.8"

services:

  # django web application, API django rest framework
  core: &core
    container_name: tracker_core
    build:
      context: .
      dockerfile: docker/tracker_core/core.Dockerfile
    volumes:
      - ./tracker_core:/app
    networks:
      - db_core_network
    ports:
      - "8000:8000"
    depends_on:
      - db_core
      - redis
    env_file:
      - .core.env
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://0.0.0.0:8000/admin/login/"]
      interval: 1m
      timeout: 5s
      retries: 2

  # application database - postgreSQL
  db_core:
    container_name: db_core
    image: postgres:14-alpine
    volumes:
      - db_core_volume:/var/lib/postgresql/data
    networks:
      - db_core_network
    ports:
      - "5432:5432"
    env_file:
      - .core.env

  # postgreSQL db management tool
  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: pgadmin@example.com
      PGADMIN_DEFAULT_PASSWORD: pgadmin
    networks:
      - db_core_network
    ports:
      - "8080:80"
    depends_on:
      - db_core

  # redis: celery broker, cached views
  redis:
    container_name: redis
    image: redis:7.0.9-alpine
    restart: on-failure
    networks:
      - db_core_network
    ports:
      - "6379:6379"
    volumes:
      - redis:/var/lib/redis/data
    healthcheck:
      test: ["CMD", "redis-cli", "-h", "localhost", "ping"]

  # celery: worker and beat scheduler
  celery:
    # inherits django web application image
    <<: *core
    container_name: celery
    restart: always
    depends_on:
      - db_core
      - core
      - redis
    expose: []
    ports: []
    networks:
      - db_core_network
    environment:
      C_FORCE_ROOT: 'true'
      CHECK_WEB: 'true'
    command: celery -A core worker -l info -B
    healthcheck:
      test: ["CMD-SHELL", "ps ax", "|" ,"grep -v grep", "|" ,"grep celery",  "||", "exit 1"]
      interval: 1m
      timeout: 5s
      retries: 2

  # tool for monitoring and administrating Celery clusters
  flower:
    container_name: flower
    image: mher/flower
    ports:
      - "5555:5555"
    environment:
      - BROKER_URL=redis://redis:6379
      - BROKER_API=http://redis:6379/api
    depends_on:
      - celery
      - redis
      - db_core
    networks:
     - db_core_network
    command: ['celery', 'flower', '--port=5555']

  # email-testing tool with a fake SMTP server underneath
  mailhog:
    container_name: mailhog
    image: mailhog/mailhog:latest
    restart: always
    ports:
      - "1025:1025" # SMTP port
      - "8025:8025" # MailHog web interface
    networks:
     - db_core_network


networks:
  db_core_network:

volumes:
  db_core_volume:
  redis: